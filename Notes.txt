Lecture  # 1:
Variables and Data Types
const = can't be re-assigned a value and can't be declared again  (block scope)
let = can be re-assigned a value but can't be declared again (block scope)
var = it can be re-assigned a value and it can also be declared again  (Global scope)

=> Never use var in your code instead of let because of block and functional scope issues.
# console.table([group of variables you want to show in tabular form])

const 
    JavaScript const variables must be assigned a value when they are declared
    Variables defined with const cannot be Redeclared
    Variables defined with const cannot be Reassigned
    Variables defined with const have Block Scope
    Always declare a variable with const when you know that the value should not be changed.

//  Prefer not to use use var because of issue in block scope and functional scope

let
    Variables declared with let have Block Scope
    Variables declared with let must be Declared before use
    Variables declared with let cannot be Redeclared in the same scope


//**************** Data types of JavaScript *****************
    Primitve Data Types
        String => "" enclosed with double String(single quote also used)
        Number => 2 to power 53
        Bigint =>
        Boolean => true/ false
        Undefined =>
        Null => Standalone value 
        Symbol => uniqueness

    // Object

console.log(typeof "Hello")    // string
console.log(typeof undefined) // undefined
console.log(typeof null)     // object
    

    let x;       // Now x is undefined
    x = 5;       // Now x is a Number
    x = "John";  // Now x is a String

//Most programming languages have many number types:
    Whole numbers (integers):
    byte (8-bit), short (16-bit), int (32-bit), long (64-bit)
    Real numbers (floating-point):
    float (32-bit), double (64-bit).
    Javascript numbers are always one type:
    double (64-bit floating point).

Code Readability should be high


//************** Conversion ***************
    "33" => 33 easily converted
    "33abc" => NaN
    true => 1; false => 0 
    
    1 => true; 0 => false
    "" => false; "Rahul" => true;

// *************** Operations *************

    console.log(2+2);
    console.log(2-2);
    console.log(2*2);
    console.log(2**3);
    console.log(2/2);
    console.log(2%3);

    console.log("1" + 2)     // 12
    console.log(1 + "2")     // 12
    console.log("1" + 2 + 2) // 122
    console.log(1 + 2 + "2") // 32


// **************** Comparisons *****************

    Normal Comparisons
        console.log(2>=2)
        console.log(3<2)
        console.log(2==2)
        console.log(2 == 1)
        console.log(2 != 1)

        // console.log("2" > 1)  // true
        // console.log("02" > 1) // true automatically convert the string into number

    
    // The resasonis that an equality check == and comaprisons > < >= <= work differently
        Comparisons convert null to a number, treating it as 0

        // console.log(null > 0)
        // console.log(null == 0)
        // console.log(null >= 0)

        === strictly check 
        console.log("2" === 2)


// ************ Data Types **********
    Primitive data types are - 
       String, Number, Boolean, null, undefined, Symbol, Bigint
    Non-Primitve(Reference)
        Array, Object, Functions

// JavaScript is a dynamically typed language. This means that variable types are determined at runtime, and you do not need to explicitly declare the type of a variable before using it. 
   You can assign different types of values to a variable during its lifetime.

   For example, in JavaScript, you can do the following:

let x = 10; // x is now a number
x = "Hello"; // x is now a string
x = true; // x is now a boolean
On the other hand, statically typed languages require you to declare the variable's type explicitly, 
    and the type checking is done at compile-time, before the code is executed.


//Symbol 

 // ******************** Memory Management in JavaScript ********************************

    Stack Memory : Used in the primitve data type
    Heap Memory : Used in the Non-primitve data type

    